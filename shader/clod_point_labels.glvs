#version 430
// buffers given by the clod renderer
layout(location = 0) in vec3 position;
layout(location = 1) in vec4 color; //the level of detail information is encoded inside the colors alpha channel
layout(location = 2) in uint index; //point ids or indices refering to the points positions inside the unreduced buffer

// data passed to geometry shader
out vec4 color_gs;
out float point_size_gs;
out float radius_gs;
out float linear_depth_gs;
out int label_gs;
out vec3 normal_gs;

//***** begin interface of view.glsl **********************************/
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************/

//***** begin interface of point_clod.glsl **********************************/
void compute_point_size(in vec3 position, in vec4 color, in mat4 central_transform, in mat4 transform,in mat4 model_view_matrix, in mat4 projection_matrix,out float point_size, out float radius, out float linear_depth);
//***** end interface of point_clod.glsl **********************************/


//***** begin interface of point_label.glsl **********************************
void label_point(in int index, in int point_label, in int point_group_mask);
void label_point(in uint index, in int point_label);
int get_label(in uint index);
//***** end interface of point_label.glsl **********************************



//***** begin interface selection_xxxxxx.glsl
bool is_in_selection(in vec4 view_position);
//***** end interface selection_xxxxxx.glsl *********************************

//***** begin interface of clod_effects.glsl
void apply_vertex_color_effects(in vec4 color, inout vec4 color_out);
//***** end interface of clod_effects.glsl

#define POINT_GROUP_MASK 0x0000FFFF;
#define POINT_GROUP_BITS 16;


uniform float selection_intensity = 0.5;
uniform float selection_label_intensity = 0.5;

layout(location = 21) uniform int visible_groups = POINT_GROUP_MASK;

layout(location = 20) uniform vec4 selection_color;//blended with point colors inside selection spheres

layout(std430, binding = 31) restrict readonly buffer ssColorMapBuffer{
	vec4 label_color_map[];
};

layout(std430, binding = 5) restrict readonly buffer ssNormalsBuffer{
	vec4 normals[];
};

uniform vec4 selected_label_color = vec4(1.0,0.0,0.0,1.0);

uniform mat4 model_view_projection;
layout(location = 1) uniform mat4 model_mat;

#define POINT_PROTECTED 4
#define POINT_SELECTED 2
#define POINT_VISIBLE 1
#define POINT_DELETED 0

//convert index to color for debugging
vec4 index_to_color(uint index) {
	return vec4(float(index & 255) / 255.0,float(index & 0xFF00)/65535.0,float(index & 0xFF0000)/16777215.0,1.0);
}	

void main()
{	
	int label = (index != -1) ? get_label(index) : POINT_DELETED;
	
	label_gs = label;
			
	int label_without_group = label >> POINT_GROUP_BITS;
	
	float label_color_factor = float(label_without_group > 0);
	color_gs = mix(vec4(color.rgb,1.0),label_color_map[label_without_group & 31], label_color_factor);
	
	apply_vertex_color_effects(color, color_gs);
	
	/*
	if (label_without_group > 0 && label_without_group < 32) {
		//TODO may use color blending here
		color_gs = label_color_map[label_without_group];
	} else {
		color_gs = vec4(color.rgb,1.0);
	}
	*/
	
	float label_selection_factor = 0.66*float((label & (POINT_SELECTED)) != 0);
	label_selection_factor += 0.34*float((label & (POINT_PROTECTED)) != 0);
	
	//color_gs = label_selection_factor*selected_label_color + (1.0-label_selection_factor)*color_gs;
	color_gs.rgb = mix(color_gs.rgb, selected_label_color.xyz, selection_label_intensity*label_selection_factor);
	
	/*
	if ( (label & POINT_VISIBLE) != 0){
		//the default label group
		int label_without_group = label >> POINT_GROUP_BITS;
		if (label_without_group > 0 && label_without_group < 32) {
			//TODO may use color blending here
			color_gs = label_color_map[label_without_group];
		} else {
			color_gs = vec4(color.rgb,1.0);
		}
	}
	else if ( (label & POINT_SELECTED) != 0){
		//special color for points in the selected group
		color_gs = selected_label_color;
	}
	*/
	
	//vec4 view_position = get_modelview_matrix()*vec4(position,1.0);
	vec4 world_position = model_mat*vec4(position,1.0);
	
	float selection_factor = float(is_in_selection(world_position));
	color_gs.rgb = mix(color_gs.rgb, selection_color.xyz, selection_intensity*selection_factor);
	//color_gs = vec4((1.0-0.5*selection_factor)*(color_gs.rgb+selection_factor*selection_color.rgb),1.0);
	
	normal_gs = normals[index].xyz;
	/*
	if (is_in_selection(world_position)){
		color_gs = vec4(0.5*(color_gs.rgb+selection_color.rgb),1.0);
	}
	*/
	gl_Position = vec4(position, 1.0);

	// do clod splat parameter computations
	compute_point_size(position, color, model_view_projection, model_view_projection, get_modelview_matrix(), 
		get_projection_matrix(), point_size_gs, radius_gs, linear_depth_gs);

	//check the visibility mask
	point_size_gs = (label & visible_groups) != 0 ? point_size_gs : 0.0;
	
	gl_PointSize = point_size_gs*0.8;
}